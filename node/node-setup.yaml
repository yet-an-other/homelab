
- name: run post install script
  hosts: all
  become: yes
  tasks:
    - name: Correcting Proxmox VE Sources
      ansible.builtin.shell: |
        cat <<EOF >/etc/apt/sources.list
        deb http://deb.debian.org/debian bookworm main contrib
        deb http://deb.debian.org/debian bookworm-updates main contrib
        deb http://security.debian.org/debian-security bookworm-security main contrib
        EOF
        echo 'APT::Get::Update::SourceListWarnings::NonFreeFirmware "false";' >/etc/apt/apt.conf.d/no-bookworm-firmware.conf

    - name: Disable 'pve-enterprise' repository
      ansible.builtin.shell: |
        cat <<EOF >/etc/apt/sources.list.d/pve-enterprise.list
        # deb https://enterprise.proxmox.com/debian/pve bookworm pve-enterprise
        EOF

    - name: Enable 'pve-no-subscription' repository
      ansible.builtin.shell: |
        cat <<EOF >/etc/apt/sources.list.d/pve-install-repo.list
        deb http://download.proxmox.com/debian/pve bookworm pve-no-subscription
        EOF

    - name: Correct ceph package sources
      ansible.builtin.shell: |
        cat <<EOF >/etc/apt/sources.list.d/ceph.list
        # deb https://enterprise.proxmox.com/debian/ceph-quincy bookworm enterprise
        # deb http://download.proxmox.com/debian/ceph-quincy bookworm no-subscription
        # deb https://enterprise.proxmox.com/debian/ceph-reef bookworm enterprise
        # deb http://download.proxmox.com/debian/ceph-reef bookworm no-subscription
        deb http://download.proxmox.com/debian/ceph-squid bookworm no-subscription
        EOF

    - name: Removing subscription nag from UI
      ansible.builtin.shell: |
        echo "DPkg::Post-Invoke { \"dpkg -V proxmox-widget-toolkit | grep -q '/proxmoxlib\.js$'; if [ \$? -eq 1 ]; then { echo 'Removing subscription nag from UI...'; sed -i '/.*data\.status.*{/{s/\!//;s/active/NoMoreNagging/}' /usr/share/javascript/proxmox-widget-toolkit/proxmoxlib.js; }; fi\"; };" >/etc/apt/apt.conf.d/no-nag-script
        apt --reinstall install proxmox-widget-toolkit &>/dev/null


- name: update system
  hosts: all
  become: yes
  tasks:
    - name: update system
      apt:
        update_cache: yes
        upgrade: dist
        autoremove: yes
        autoclean: yes

- name: make ssh login with ceritificate
  hosts: all
  become: yes
  tasks:
    - name: make ssh login with ceritificate
      authorized_key: user={{ ansible_user }} key="{{ lookup('file', '{{ ssh_pub_key_file }}') }}"

- name: install iperf3, btop, lldpd, frr
  hosts: all
  become: yes
  tasks:
    - name: install stuff
      apt:
        name: "{{ item }}"
        state: present
      with_items:
        - iperf3
        - btop
        - lldpd
        - frr

- name: create thunderbolt network
  hosts: all
  become: yes
  tasks:
    - name: add thunderbolt modules
      ansible.builtin.lineinfile:
        path: /etc/modules
        line: "{{ item.line }}"
      loop:
        - line: thunderbolt
        - line: thunderbolt-net

    - name: create link thunderbolt files to rename interfaces
      ansible.builtin.copy:
        dest: /etc/systemd/network/00-thunderbolt{{ item.id }}.link
        content: |
          [Match]
          Path={{ item.pci_path }}
          Driver=thunderbolt-net
          [Link]
          MACAddressPolicy=none
          Name={{ item.if_name }}
      loop:
        - { id: 0, pci_path: "pci-0000:00:0d.2", if_name: "en05" }
        - { id: 1, pci_path: "pci-0000:00:0d.3", if_name: "en06" }

    - name: make tb interface up on reload
      ansible.builtin.copy:
        dest: /etc/udev/rules.d/10-tb-en.rules
        content: |
          ACTION=="move", SUBSYSTEM=="net", KERNEL=="en05", RUN+="/usr/local/bin/pve-en05.sh"
          ACTION=="move", SUBSYSTEM=="net", KERNEL=="en06", RUN+="/usr/local/bin/pve-en06.sh"

    - name: create iface up scripts
      ansible.builtin.copy:
        dest: /usr/local/bin/pve-{{ item.line }}.sh
        content: |
          #! /bin/bash
          # this brings the renamed interface up and reprocesses any settings in /etc/network/interfaces for the renamed interface
          /usr/sbin/ifup {{ item.line }}
      loop:
        - line: en05
        - line: en06

    - name: make scripts executable
      ansible.builtin.command:
        cmd: chmod +x /usr/local/bin/pve-en05.sh /usr/local/bin/pve-en06.sh

    - name: update initramfs
      ansible.builtin.command:
        cmd: update-initramfs -u -k all

    - name: rewrite network interfaces
      ansible.builtin.copy:
        dest: /etc/network/interfaces
        content: |
          # network interface settings; autogenerated
          # Please do NOT modify this file directly, unless you know what
          # you're doing.
          #
          # If you want to manage parts of the network configuration manually,
          # please utilize the 'source' or 'source-directory' directives to do
          # so.
          # PVE will preserve these directives, but will NOT read its network
          # configuration from sourced files, so do not attempt to move any of
          # the PVE managed interfaces into external files!

          auto lo
          iface lo inet loopback

          auto lo:6
          iface lo:6 inet static
                  address fd40::4{{ node_id }}/128

          iface enp86s0 inet manual

          auto en05
          iface en05 inet manual
                  mtu 65520

          auto en06
          iface en06 inet manual
                  mtu 65520

          auto vmbr0
          iface vmbr0 inet static
                  address 192.168.10.24{{ node_id }}/24
                  gateway 192.168.10.1
                  bridge-ports enp86s0
                  bridge-stp off
                  bridge-fd 0
                  bridge-vlan-aware yes
                  bridge-vids 2-100

          iface wlo1 inet manual

# auto vmbr1
# iface vmbr1 inet6 static
#         address fd50::1/120
#         bridge-ports none
#         bridge-stp off
#         bridge-fd 0
      
    - name: enable ip v4 forwarding
      ansible.builtin.replace:
        path: /etc/sysctl.conf
        regexp: '#net.ipv4.ip_forward=1'
        replace: 'net.ipv4.ip_forward=1'

    - name: enable ip v6 forwarding
      ansible.builtin.replace:
        path: /etc/sysctl.conf
        regexp: '#net.ipv6.conf.all.forwarding=1'
        replace: 'net.ipv6.conf.all.forwarding=1'

    - name: Create a directory for frr service if it does not exist
      ansible.builtin.file:
        path: /etc/systemd/system/frr.service.d
        state: directory

    - name: create dependency file for FRR to start after network
      ansible.builtin.copy:
        content: |
          [Unit]
          Wants=sys-subsystem-net-devices-en05.device sys-subsystem-net-devices-en06.device
          After=sys-subsystem-net-devices-en05.device sys-subsystem-net-devices-en06.device
        dest: /etc/systemd/system/frr.service.d/dependencies.conf

    - name: enable frr daemon
      ansible.builtin.replace:
        path: /etc/frr/daemons
        regexp: 'fabricd=no'
        replace: 'fabricd=yes'

    - name: write frr config
      ansible.builtin.copy:
        content: |
          frr version 8.5.2
          frr defaults traditional
          hostname {{ inventory_hostname }}
          log syslog informational
          service integrated-vtysh-config
          !
          interface en05
            ipv6 router openfabric 1
          exit
          !
          interface en06
            ipv6 router openfabric 1
          exit
          !
          interface lo
            ipv6 router openfabric 1
            openfabric passive
          exit
          !
          router openfabric 1
            net 49.0000.0000.000{{ node_id }}.00
          exit
          !
        dest: /etc/frr/frr.conf


    - name: Attach tb ports to perf cpu
      ansible.builtin.cron:
        name: "set tb ports to perf cpu"
        special_time: reboot
        job: grep thunderbolt /proc/interrupts | cut -d ":" -f1 | xargs -I {} sh -c 'echo 0-7 | tee "/proc/irq/{}/smp_affinity_list"'


- name: Add intel & quemu on grub
  hosts: all
  become: yes
  tasks:
    - name: Check if we fix grub already
      ansible.builtin.lineinfile:
        path: /etc/default/grub
        regexp: 'GRUB_CMDLINE_LINUX_DEFAULT=".*intel_iommu=on.*"'
        state: absent
      check_mode: yes
      changed_when: false
      register: out

    - name: Add intel & quemu on grub
      ansible.builtin.replace:
        path: /etc/default/grub
        regexp: 'GRUB_CMDLINE_LINUX_DEFAULT="(.*)"'
        replace: 'GRUB_CMDLINE_LINUX_DEFAULT="\1 intel_iommu=on iommu=pt"'
      when: not out.found

    - name: update grub
      become: yes
      ansible.builtin.command: update-grub
      when: not out.found

## Setup local ssh config
##
- name: update local ssh config
  hosts: all
  vars:
    text_block: |
      Host {{ inventory_hostname }}
        HostName {{ ansible_host }}
        User root
        Port 22
        IdentityFile {{ ansible_ssh_private_key_file }}
        IdentitiesOnly yes

  tasks:
    - name: update local ssh config
      blockinfile:
        path: ~/.ssh/config
        append_newline: true
        prepend_newline: true
        insertbefore: "Host \\*"
        marker: "# {mark} ANSIBLE MANAGED BLOCK"
        marker_begin: "{{ node_id }}"  
        block: "{{ text_block }}"
        create: yes  # Create file if it doesn't exist
      delegate_to: localhost


- name: Node reboot
  hosts: all
  become: yes
  tasks:
    - name: Reboot
      ansible.builtin.reboot:
        reboot_timeout: 300
        test_command: uptime
